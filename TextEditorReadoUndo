import java.util.*;
interface Stack{
void push(String item);
String pop();
String peek();
boolean isEmpty();
}
class ArrayStack implements Stack{
private String[] elements = new String[10];
private int top=-1;
public void push(String item){
if (top==elements.length-1){
System.out.println("Sorry stack is full");
}
elements[++top]=item;
}
public String pop(){
if(isEmpty()){
System.out.println("Sorry cant pop stack is empty");
return null;
}
return elements[top--];
}
public String peek(){
if(isEmpty()){
System.out.println("Sorry stack is empty");
return null;
}
return elements[top];
}
public boolean isEmpty(){
return top==-1;
}
}
class Ted{
public static void main(String[] args){
Scanner sc=new Scanner(System.in);
Stack undostack=new ArrayStack();
while(true){
System.out.println("1. write");
System.out.println("2. undo");
System.out.println("3. peek");
System.out.println("4. Empty");
System.out.print("Enter your choice:");
int ch=sc.nextInt();
switch(ch){
case 1:
System.out.print("Enter text:");
String text=sc.next();
undostack.push(text);
break;
case 2:
System.out.println("undo"+(undostack.pop()));
break;
case 3:
System.out.println("Top:"+(undostack.peek()));
break;
case 4:
System.out.println("Exiting....");
sc.close();
return;
default:
System.out.println("Invalid Choice");
}
}
}
}



